[{"title":"Golang Absolute Value","url":"/blog/go/golang-absolute-value/","description":"To find the absolute value of a number in Golang, use math. The Abs() function. This function takes a float64 as input and returns a float64 as output.","tags":["golang"]},{"title":"Golang anonymous functions","url":"/blog/go/golang-anonymous-functions/","description":"In Golang, anonymous functions are functions that are not bound to an identifier. They are also known as lamda functions or function literals. In this article, we explore how to use anonymous functions in Golang.","tags":["golang"]},{"title":"Golang Anonymous Structs","url":"/blog/go/golang-anonymous-struct/","description":"Anonymous struct is a struct without a name. It is used to create a struct on the fly without having to define a struct type.","tags":["golang"]},{"title":"Golang Append (A Complete Guide)","url":"/blog/go/golang-append/","description":"Append method is a built-in method in Golang used to append more elements to a slice. In this article, we will learn about the append method in Golang with examples.","tags":["golang"]},{"title":"Golang Arrays (A Complete Guide)","url":"/blog/go/golang-arrays/","description":"Arrays in Go are a fixed-length sequence of elements of a single type. Arrays are a fundamental data structure in Go. In this article, we will learn about arrays in Go.","tags":["golang"]},{"title":"Golang Assert","url":"/blog/go/golang-assert/","description":"Assert is a package that provides a set of helper functions that make it easier to test various properties in your Go programs. It is intended to be used in the xtest files of your package, as an aid in writing tests.","tags":["golang"]},{"title":"Golang Atoi","url":"/blog/go/golang-atoi/","description":"Atoi is a method in the strconv package that converts a string to an integer. It returns an error if the string cannot be converted to an integer. The strconv package is part of the standard library.","tags":["golang"]},{"title":"Golang Atomic","url":"/blog/go/golang-atomic/","description":"In Golang, atomic is a package that provides low-level atomic memory primitives useful for implementing synchronization algorithms. Atomic operations execute in constant time and are implemented in assembly language on supported platforms. They are provided for int32, int64, uint32, uint64, uintptr, unsafe.Pointer, and unsafe.Size values.","tags":["golang"]},{"title":"Golang Benchmarking","url":"/blog/go/golang-benchmarking/","description":"In Go, Benchmarking is a method of evaluating a program's performance by measuring how long it takes to execute and how much memory it consumes under various conditions. It can assist you in identifying areas of your code that can be optimized and comparing different implementations to determine which is the most effective. Benchmarking is an important tool for optimizing code for performance.","tags":["golang","featured"]},{"title":"How to convert byte array to string in Golang","url":"/blog/go/golang-byte-array-to-string/","description":"In Go, you can convert a byte array to a string using the `string()` function. This function takes a byte array as an argument and returns a string. You can also use the `fmt.Sprintf()` function to convert a byte array to a string.","tags":["go"]},{"title":"Golang Bytes","url":"/blog/go/golang-bytes/","description":"A byte is an unsigned integer that represents a single byte of data it is represented by the `uint8` type. By convention a byte is represented by the `byte` keyword. A byte is 1 byte long.","tags":["golang"]},{"title":"Golang Enum (A Complete Guide)","url":"/blog/go/golang-enum/","description":"In Go Enum is a type that consists of a set of named constants. Constants are used to represent a fixed value that the program may not alter during its execution. In this article, we will learn about Enum in Golang.","tags":["featured","golang"]},{"title":"Golang for loop (A Complete Guide)","url":"/blog/go/golang-for-loop/","description":"In Golang for loop is used to iterate over a collection of data. In this tutorial, we will learn how to use for loop in Golang and the various patterns used in for loop.","tags":["featured","golang"]},{"title":"Golang Generics (A Complete Guide)","url":"/blog/go/golang-generics/","description":"Generics are a way to write functions and types that can work with any type. In Golang generics can be defined using empty interfaces, or using type parameters and type inference.","tags":["featured","golang"]},{"title":"Golang Interfaces (A Complete Guide)","url":"/blog/go/golang-interface/","description":"Interfaces in golang are a powerful tool that allows you to define a set of methods that a type must implement. In this article, we will learn how to use interfaces in golang","tags":["featured","golang"]},{"title":"Golang Map (A Complete Guide)","url":"/blog/go/golang-map/","description":"In Golang a map is a data structure that stores key-value pairs. In this article, we will learn about the map data structure in Golang.","tags":["featured","golang"]},{"title":"Golang ParseInt","url":"/blog/go/golang-parseint/","description":"ParseInt is a method in the strconv package that converts a string to an integer. It takes in a string, a base, and a bit size. It returns an integer and an error.","tags":["golang"]},{"title":"Golang String Manipulation","url":"/blog/go/golang-strings/","description":"Go provides a powerful set of tools for manipulating strings. Whether you're looking to do basic slicing and dicing, more complex pattern matching, or something else entirely, Go has you covered. In this blog post, we'll take a look at some of the key features and functions of Go's string manipulation library. So let's get started!","tags":["golang"]},{"title":"Golang Switch Statements (A Complete Guide)","url":"/blog/go/golang-switch/","description":"A switch statement in Go is used to execute a block of code among many alternatives. It is declared using the keyword switch followed by the condition to be evaluated. The condition can be a variable, constant, or expression.","tags":["golang","featured"]},{"title":"Wrtiting Tests in Golang. (A Complete Guide)","url":"/blog/go/golang-tests/","description":"Writing tests in Golang is a great way to ensure that your code is working as expected. In this article, we explore how to write tests in Golang.","tags":["golang","featured"]},{"title":"How to measure execution time in Go","url":"/blog/go/how-to-measure-execution-time-in-golang/","description":"To measure execution time in Golang we use time.Now() and time.Since() functions. Some other functions we can use are, `.Sub()`, and `.UnixNano`  among others.","tags":["go","featured"]},{"title":"How to print structs in Go","url":"/blog/go/how-to-print-structs-in-go/","description":"To print structs we use the fmt package i.e fmt.Printf(\"%v\", structName). This will print the struct in the format of a map. To print the struct in a more readable format we use the %#v format specifier. This will print the struct in the format of a struct.","tags":["golang","featured"]},{"title":"How to convert byte array to string in Golang","url":"/blog/template/","description":"In Go, you can convert a byte array to a string using the `string()` function. This function takes a byte array as an argument and returns a string. You can also use the `fmt.Sprintf()` function to convert a byte array to a string.","tags":["golang"]}]