---
import BaseLayout from "@layouts/BaseLayout.astro";
import ArticleCard from "@components/ArticleCard.astro";
import Pagination from "@components/Pagination.astro";
import { Frontmatter, sortDateDescending, getAllUniqueTags } from "src/misc";
import { MarkdownInstance, Page } from "astro";
import config from "src/config.js";

export interface Props {
  page: Page<MarkdownInstance<Frontmatter>>;
}

export const mdxPosts = await Astro.glob<Frontmatter>("../../blog/**/*.mdx");
export const mdPosts = await Astro.glob<Frontmatter>("../../blog/**/*.md");
export const posts = [...mdxPosts, ...mdPosts];

// posts that are not drafts
export let nonDrafts =[]
posts.forEach((post) => {
  if (post.frontmatter.draft != true) {
    nonDrafts.push(post)
  }
})

export async function getStaticPaths({ paginate }) {
  const allTags = getAllUniqueTags(nonDrafts);
  // For every tag, return a paginate() result.
  // Make sure that you pass `{params: {tag}}` to `paginate()`
  // so that Astro knows which tag grouping the result is for.
  return allTags.map((tag) => {
    // if tag is has a space in it, replace it with a dash
    const filteredPosts = sortDateDescending(
      // remove spaces from tag

      nonDrafts.filter((post) => {
        return (
          post.frontmatter.tags.find((ele) => ele === tag) &&
          post.frontmatter.draft != true
        );
      })
    );

    return paginate(filteredPosts, {
      params: { tag },
      pageSize: config.pageSize ?? 5,
    });
  });
}

const { page } = Astro.props;

const { tag } = Astro.params;
---

<BaseLayout title={`#${tag}`}>
  <h1 class="text-center text-3xl font-semibold text-secondary mb-8">
    #{tag.toString()}
  </h1>

  <div class="flex flex-wrap flex-col justify-center gap-12">
    {
      page.data.map((post, index) => (
        <ArticleCard content={post} lazyLoading={index > 2} />
      ))
    }
  </div>

  <Pagination page={page} dir={tag.toString()} />
</BaseLayout>
